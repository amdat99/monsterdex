{"version":3,"sources":["components/card/Card.js","components/cardlist/Cardlist.js","components/cardlist/Scroll.js","components/searchBox/SearchBox.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","CardList","monsters","map","Scroll","props","style","overflowY","overflowX","height","maxWwidth","children","SearchBox","searchChange","placeholder","aria-label","type","onChange","App","OnSearchChange","event","setState","searchField","target","value","filteredMonsters","state","filter","toLowerCase","includes","fetch","then","response","json","data","this","React","Component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iSAceA,G,MATF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACX,OACI,sBAAKC,UAAY,wBAAjB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,gCACtBJ,EAAQK,UCMLC,G,KAVG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAChB,OACI,qBAAKN,UAAY,YAAjB,SACEM,EAASC,KAAI,SAAAR,GAAO,OACrB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQI,WCKbK,EAVA,SAACC,GACd,OACE,qBAAKT,UAAY,UACbU,MAAO,CAAEC,UAAW,SACpBC,UAAW,SAAYC,OAAQ,QAASC,UAAW,QAFvD,SAGGL,EAAMM,YCSEC,G,MAfG,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,aAA8B,EAAjBC,YAE/B,OACE,8BACE,uBACEC,aAAa,gBACbnB,UAAU,SACVoB,KAAK,SACLF,YAAY,gBACZG,SAAUJ,QCoCHK,G,wDAvCb,aAAc,IAAD,8BACX,gBAaAC,eAAiB,SAACC,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAfnC,EAkBXC,iBAAkB,WACd,OAAO,EAAKC,MAAMxB,SAASyB,QAAQ,SAAAhC,GACnC,OAAOA,EAAQK,KAAK4B,cAAcC,SAAS,EAAKH,MAAMJ,YAAYM,mBAlBtE,EAAKF,MAAO,CACVxB,SAAU,GACVoB,YAAa,IAJJ,E,gEAQU,IAAD,OAClBQ,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKb,SAAS,CAACnB,SAAUgC,S,+BAc/C,OAEE,sBAAKtC,UAAU,MAAf,UACE,mDACE,cAAC,EAAD,CAAWiB,aAAesB,KAAKhB,iBAC/B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUjB,SAAYiC,KAAKV,8B,GAhCnBW,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAC4B,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BrB,M","file":"static/js/main.af865ab7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.css'\r\n\r\n\r\nconst Card = ({monster}) => {\r\n    return (\r\n        <div className = 'cardContainer example'>\r\n            <img alt='monster' src={`https://robohash.org/${monster.id}.png?set=set2&size=200x200`} />\r\n           {monster.name} \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/Card';\r\n\r\nimport './cardlist.css'\r\n\r\n const CardList = ({monsters}) => {\r\n    return (\r\n        <div className = 'cardlist '>\r\n        { monsters.map(monster => \r\n         <Card key={monster.id} monster = {monster} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nimport './cardlist.css'\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div className = 'example' \r\n        style={{ overflowY: 'scroll',\r\n        overflowX: 'hidden',   height: '897px', maxWwidth: '100%'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport './searchBox.css'\r\n\r\nconst SearchBox = ({searchChange,placeholder}) => {\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        aria-label = 'Search Robots'\r\n        className='search'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\nimport CardList from './components/cardlist/Cardlist'\nimport Scroll from './components/cardlist/Scroll'\nimport SearchBox from './components/searchBox/SearchBox'\n\nimport './App.css';\n \n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state ={\n      monsters :[],\n      searchField: ''\n    }\n  }\n\n    componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users')\n          .then(response => response.json())\n          .then(data => this.setState({monsters: data}))\n      }\n\n    OnSearchChange = (event) => {\n         this.setState({searchField: event.target.value})\n        }\n\n    filteredMonsters= () =>{\n        return this.state.monsters.filter( monster =>{ \n        return monster.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n        })\n    }\n\n  render(){\n  return (\n    \n    <div className=\"App\">\n      <h1> Monsters Rolodex</h1>\n        <SearchBox searchChange= {this.OnSearchChange}/>\n        <Scroll>  \n          <CardList monsters = {this.filteredMonsters()} />\n        </Scroll>\n       \n       \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}